//Importing libaries

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;
import java.util.ArrayList;
import java.util.Arrays;

//Comments from Win

//This code is inefficient and can be improved upon by significantly also please read comments before doing anything

//Please tell me if there are any bugs or issues because as far as I know there isn't a single one

public class FinalProject extends JFrame{
	
	//Defining variables and tables
	
	//Defining random
	
	Random randomNum = new Random();
	
	//Setting up UI (moved outside of public FinalProject because they are edited outside of it)
	
	JTextField TextArea;
    JTextArea resultTextArea = new JTextArea();	
    JLabel playOptionTextArea = new JLabel("Do you want to play yes or no?");
    JLabel inputPromptLabel = new JLabel("Enter what mode you would like to play: Normal, Bot, Hard");
    JButton inputButton = new JButton("Enter");
    JPanel inputPanel = new JPanel();
    
    boolean won;
    String word;
    
	ArrayList<String> wordList = new ArrayList<String>(Arrays.asList("Horse", "Badger", "Zebra", "Elephant", "Duck", "Dog", "Seal", "Hawk", "Cat", "Goat", "Deer",
	"Panda", "Monkey", "Skunk", "Rabbit", "Rat", "Dolphin"));
	
	//Bot stuff
	
	ArrayList<String> availableBotWordList = (ArrayList<String>) wordList.clone();
	ArrayList<String> botLetters = new ArrayList<String>(Arrays.asList("b", "c", "d", "f","g","h","j","k","l","m","n","p","q","r","s","t","v","w","x","y","z"));
	ArrayList<String> availableBotLetters = (ArrayList<String>) botLetters.clone();
	ArrayList<String> botVowels = new ArrayList<String>(Arrays.asList("a", "e", "i", "o", "u"));
	ArrayList<String> availableBotVowels = (ArrayList<String>) botVowels.clone();
	ArrayList<String> availableGuaranteeCorrectBotGuess = new ArrayList();
	
	boolean botWon = false;
	boolean botTurn = false;
	boolean botCorrectlyGuessedALetter = false;
	String botGuess = "";
	String botWord = "";
	
	int incorrectBotGuess = 0;
	
	//Bot guesses for stat display
	
    ArrayList<String> botAlreadyGuessedLetters = new ArrayList<String>();
    ArrayList<String> botAlreadyGuessedWords = new ArrayList<String>(); 
    ArrayList<String> botCorrectGuessedLetters = new ArrayList<String>();
	
    //Bot odds to guess a word in percentage
    
    int botOddsToGuessWord = 5;
    int botOddsToGuessLetter = 20;
	int botMissingCharacter = 0;
	
    //Table to store hangman art
    
	static ArrayList<ArrayList<String>> hangmanArt = new ArrayList<>();
	
	//Variables used to store three words that have been in circulation in order to avoid having a word pop up again before three more rounds have been played
	
	String firstWord = "";
	String secondWord = "";
	String thirdWord = "";
	
	ArrayList<String> wordsUsedInPastThreeGames = new ArrayList<String>();
	
	//Tables used to display player stats
	
	ArrayList<String> alreadyGuessedLetters = new ArrayList<String>();
    ArrayList<String> alreadyGuessedWords = new ArrayList<String>(); 
    ArrayList<String> correctGuessedLetters = new ArrayList<String>();
    
    //Used to build stats that will be displayed
    
    StringBuilder stats = new StringBuilder();
    
    //Random variables
    
    String guessType = "";
    String guess = "";
    
    String mode = "";
    
    boolean correctlyGuessedALetter = false;
    
    boolean startNewGame = true;
    boolean start = true;
    
    int lives = 7;
    
    public FinalProject() {
    	
    	//Setting up UI
    	
    	setTitle("Hangman");
        setSize(1920, 1080);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        JPanel contentPane = new JPanel();
        contentPane.setLayout(new BorderLayout());
        
        inputPanel.setLayout(new FlowLayout());

        TextArea = new JTextField(10);
        
        JPanel resultPanel = new JPanel();
        resultPanel.setLayout(new BorderLayout());
        
        JLabel resultLabel = new JLabel("Hangman output:");

        resultPanel.add(resultLabel, BorderLayout.NORTH);
        resultPanel.add(new JScrollPane(resultTextArea), BorderLayout.CENTER);
        
        contentPane.add(inputPanel, BorderLayout.NORTH);
        contentPane.add(resultPanel, BorderLayout.CENTER);
        
        //If it is the start of a new game there will be text asking if the player wants to play or not
        
    	if (startNewGame == true) {
    		inputPanel.add(playOptionTextArea);
            inputPanel.add(TextArea);
            inputPanel.add(inputButton);
    	}
    	else {
            inputPanel.add(inputPromptLabel);
            inputPanel.add(TextArea);
            inputPanel.add(inputButton);
    	}
        
    	//This is what happens after the button is pressed    	
    	   	
        inputButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
            	if (startNewGame == true) {
            		
            		//Setup if it is the start of a new game
            		
            		if (TextArea.getText().toString().equalsIgnoreCase("yes")) {
            			inputPanel.remove(playOptionTextArea);
            			inputPanel.add(inputPromptLabel);
            			inputPanel.remove(TextArea);
            			inputPanel.remove(inputButton);
                        inputPanel.add(TextArea);
                        inputPanel.add(inputButton);
                        resultTextArea.setText("");
                        TextArea.setText("");
            			inputPanel.revalidate();
            			inputPanel.repaint();
            	        startNewGame = false;
                        newGame();
            		}
            		
            		//Player decided to quit
            		
            		else if (TextArea.getText().toString().equalsIgnoreCase("no")) {
            			System.exit(0);
            		}
            		
            		//Player did not type yes or no to keep playing or quit
            		
            		else {
            			resultTextArea.setText("You did not enter yes or no");
            		}
            	}
            	
            	//Important because this is how the player interacts with the rest of the code
            	
            	else if (mode != "") {
            		UserInput();
            	}
            	
            	//Player is picking their mode
            	
            	else {
            		System.out.println("Picking mode");
            		PickMode();
            	}
            }
        });
    	
        //Set UI
        
        setContentPane(contentPane);
        
    }
    
    private void newGame() {
    	
    	System.out.println("Starting a new game");
    	
    	System.out.println("Assigning new word");
    	
    	//Picks random word
    	
    	int number = ((int) (Math.random() * wordList.size()));
		word = wordList.get(number);
		
		//Makes sure that word does not reappear before three games		
		
		if (firstWord == "") {
			firstWord = word;
			wordList.remove(word);
			wordsUsedInPastThreeGames.add(word);
		}
		else if (secondWord == "") {
			secondWord = word;
			wordList.remove(word);
			wordsUsedInPastThreeGames.add(word);
		}
		else if (thirdWord == "") {
			thirdWord = word;
			wordList.remove(word);
			wordsUsedInPastThreeGames.add(word);
		}
		else {
			firstWord = secondWord;
			secondWord = thirdWord;
			thirdWord = word;
			wordList.add(wordsUsedInPastThreeGames.get(0));
			wordsUsedInPastThreeGames.remove(0);
			wordList.remove(word);
			wordsUsedInPastThreeGames.add(word);
		}
		
		//Sets the blank spots for the player to guess the letters e.g. ___ being Dog
		
		for (int i = 0; i < word.length(); i++) {
			correctGuessedLetters.add("_");
		}
		
		//Debugging
		
		System.out.println(correctGuessedLetters);
		
		System.out.println("The word is: " + word);
		
    }
    
    private void PickMode() {
    	
		inputPromptLabel.setText("Enter what mode you would like to play: Normal, Bot, Hard");
		
		//Converts Player input into lowercase
		
		mode = TextArea.getText().toLowerCase();

		//Runs if player did not enter normal, hard or bot
		
		if (mode.equals("normal") == false && mode.equals("hard") == false && mode.equals("bot") == false) {
			
			//Runs if the player did not put Normal, Bot or Hard
			
			mode = "";
			resultTextArea.setText("You did not enter Normal, Bot or Hard");
		}
		
		//Runs if player picked one of the three options
		
		else {
			
			//Adds the empty slot for the Bot to guess, same as player
			
			if (mode.equals("bot")) {
				
				System.out.println("Assigning bot word");
				
				botWord = wordList.get(Math.abs(randomNum.nextInt(wordList.size())));
				
				for (int i = 0; i < botWord.length(); i++) {
					botCorrectGuessedLetters.add("_");
					availableGuaranteeCorrectBotGuess.add(String.valueOf(botWord.charAt(i)).toLowerCase());
				}
				System.out.println(botCorrectGuessedLetters);
				System.out.println(botWord);
			}
			
			inputPromptLabel.setText("Enter if you want to guess word or letter:");
		}
		
		//Clears area to write text
		
		TextArea.setText("");
    }
    
    private void UserInput() {
    	
    	//IMPORTANT
    	
    	//Runs if player currently has the option to pick a word or letter
    	
    	if (inputPromptLabel.getText().equals("Enter if you want to guess word or letter:")) {
    		
    		//Converts user input to lowercase
    		
    		guessType = TextArea.getText().toLowerCase();
    		
    		//Runs if the player did not enter word or letter
    		
        	if (guessType.equals("word") == false && guessType.equals("letter") == false) {
                resultTextArea.setText("You did not enter word or letter");
                stats.delete(0,  stats.length());
                stats.append("You did not enter word or letter\n");
                if (start == false) {
                    HangmanImage();
                }
        	}
        	
        	//Runs if player entered word or letter
        	
        	else if (guessType.equals("word") || guessType.equals("letter")) {
        		
        		System.out.println("Pass guess type");
        		
                HangmanImage();
        		
        		//Runs if player entered word
        		
                if (guessType.equals("word")) {
                    inputPromptLabel.setText("Enter the word that you would like to guess");	
                }                
                else {
                	
                    //Runs if player entered letter
                	
                    inputPromptLabel.setText("Enter the letter that you would like to guess");
                }
        	}
    	}
    	
    	//Runs if player guesses something
    	
    	else {
    		
    		//Converts Player's guess into lowercase
    		
    		guess = TextArea.getText().toLowerCase();
    		
    		//Runs if player did not enter anything
    		
    		if (guess.equals("")) {
    			resultTextArea.setText("You did not enter anything");
    			stats.delete(0,  stats.length());
    			stats.append("You did not enter anything\n");
    			HangmanImage();
    			return;
    		}
    		
    		//Shows you correct word
    		
    		System.out.println("Guess is: " + guess);
    		System.out.println("Word is: " + word.toLowerCase());
    		
    		//Runs if the player guesses a word
    		
    		if (guessType.equals("word")) {
    			
    			//Runs if player wins
    			
    			if (guess.equals(word.toLowerCase())) {
    				alreadyGuessedWords.add(guess);
        			won = true;
        		}
    			
    			//Runs if player gets it wrong
    			
    			else {
    				
    				alreadyGuessedWords.add(guess);
    				
    				//Takes away lives and 2 lives if the player is playing in hard mode
    				
    				if (mode.equals("hard")) {
    					if (lives == 1) {
    						lives -= 1;
    					}
    					else {
            				lives -= 2;		
    					}
    				}
    				else {
        				lives -= 1;	
    				}
    				
    				//If the player chooses the Bot mode then it is now the Bot's turn
    				
			    	if (mode.equals("bot")) {
			    		
			    		System.out.println("Bot's turn");
			    		
			    		BotTurn();
			    	}
    			}
    			
    			//Displays stats
    			
				HangmanImage();
				
    		}
    		
    		//Runs if the Player guesses a letter
    		
    		else {
    			
    			//Runs if the player enters more than one letter
    			
    			if (guess.length() != 1){
    				inputPromptLabel.setText("Enter the letter that you would like to guess");
    				stats.append("You entered more than 1 letter\n");
    				HangmanImage();
    			}
    			
    			//Runs if player only enters one letter
    			
    			else {
    				
    				boolean alreadyGuessed = false;
    				boolean correctGuess = false;
    				
    				//Runs if the Player has already guessed a letter
    				
    				if (alreadyGuessedLetters.size() != 0) {
    					
    					//Loops through the alreadyGuessedLetters table to see if the player has already guessed the letter
    					
        				for (int i = 0; i < alreadyGuessedLetters.size(); i++) {
        					
        					//Runs if the player has already guessed the letter before
        					
        					if (guess.charAt(0) == (alreadyGuessedLetters.get(i).charAt(0))) {
        						alreadyGuessed = true;
        	    				inputPromptLabel.setText("Enter the letter that you would like to guess");
        	    				stats.append("You already tried this letter before\n");
        	    				HangmanImage();
        						break;
        					}
        					
        				}
        				
    				}
    				
    				//Debugging
    				
    				System.out.println(alreadyGuessed);
    				
    				//Runs if the player has not already guessed the letter
    				
    				if (alreadyGuessed == false) {
    					
    					//Loops through the word to see if the letter is in the word
    					
        				for (int i = 0; i < word.length(); i++) {
        					
        					//Runs if the letter is in the word
        					
        					if (guess.charAt(0) == word.toLowerCase().charAt(i)) {
        						
        						//Sets the letter to a capital if it is the first letter of the word e.g. D_g
        						
        						if (i == 0) {
        							correctGuessedLetters.set(i, guess.toUpperCase());
        						}
        						else {
        							
        							//Sets letter to the spot where it would be in the word
        							
        							correctGuessedLetters.set(i, guess);	
        						}
        						
        						//Adds to the alreadyGuessedLetters table and sets correctGuess to true, if correctGuess is false then a life will be taken
        						
        						if (alreadyGuessedLetters.contains(guess) == false) {
        							alreadyGuessedLetters.add(guess);	
        						}
        						correctGuess = true;
        						
        					}
        					
        				}
        				
        				//Runs if the guess was wrong
        				
        				if (correctGuess == false) {
        					
        					//Adds to the alreadyGuessedLetters table which is displayed so the player doesn't guess the same thing again
        					
        					alreadyGuessedLetters.add(guess);
        					
        					//Checks if the mode is hard and if it is 2x lives will be lost
        					
            				if (mode.equals("hard")) {
            					
            					//Reason that only one life is taken if there is only one life left is because it would go to -1 if it was the normal -2 which would be out of bounds
            					
            					if (lives == 1) {
            						lives -= 1;
            					}
            					else {
                    				lives -= 2;		
            					}
            				}
            				else {
                				lives -= 1;	
            				}
        				}
        				
        				CheckIfCorrectLetter(guess);
        				
    					//Runs if the Player didn't win 
    					
    					if (won == false) {
    						
    						//Run bot's turn if mode is bot
    						
    				    	if (mode.equals("bot")) {
    				    		
    				    		System.out.println("Bot's turn");
    				    		
    				    		BotTurn();
    				    	}    				    	
    				    	else{
    				    		HangmanImage();
    				    	}
    					}
    					
    				}
    			}
    		}
    	}

    	
    	TextArea.setText("");
    	System.out.println("Cleared");
    	
    }
    
    private void BotTurn() {
    	
    	System.out.println("Bot run");
    	
    	int botChoice = (int) (Math.random() * 100);
    	
    	//Debugging guarantee bot to guess word
    	
    	//botOddsToGuessWord = 100;
    	
    	//
    	
    	//System.out.println(botChoice);
    	//System.out.println(100 - botOddsToGuessWord);
    	
		for (int i = 0; i < botWord.length(); i++) {
			
			//System.out.println("Letter at i: " + (botCorrectGuessedLetters.get(i)));
			
			if (botCorrectGuessedLetters.get(i) == "_") {
				botMissingCharacter++;
			}
		}
		
		//60 is the percentage of the word that is correct in order for the bot to be able to more accurately guess the word
		
		//System.out.println("Bot missing character: " + botMissingCharacter);
		
		//System.out.println("Bot length - Bot missing character : " + (botWord.length() - botMissingCharacter));
		
		//System.out.println("Bot length: " + botWord.length());
		
		//System.out.println("60% length of bot word is: " + ((float) botWord.length() / 100) * 60);
				
		if ( (float) (botWord.length() - botMissingCharacter) >= ((float) botWord.length() / 100) * 60) {
				
				//System.out.println("Add odds for bot to guess word");
				
				botOddsToGuessWord += 60;
		}
    	
		System.out.println("Bot odds to guess word: " + botOddsToGuessWord);
		
    	if (botChoice <= (100 - botOddsToGuessWord)) {
    		
    		//Alphabet
    		
    		int botLetterChoice = (int) (Math.random() * 100);
    		
    		if (botLetterChoice <= (100 - botOddsToGuessLetter) && availableBotVowels.size() != 0) {
    			
    			//Vowel
    			
    			botGuess = availableBotVowels.get((int) (Math.random() * availableBotVowels.size()));
    			    			
    		}
    		else if (availableBotLetters.size() != 0) {
    			
    			//Letter
    			
    			botGuess = availableBotLetters.get((int) (Math.random() * availableBotLetters.size()));
    			    			
    			if (botOddsToGuessLetter == 100) {
    				botOddsToGuessLetter = 20;
    			}
    			
    		}
    		
    		botOddsToGuessWord += 5;
    		
			System.out.println("Check if bot guess is correct");
			
			BotCheckIfCorrectLetter();
			
    	}
    	else if (availableBotWordList.size() != 0) {
    		
    		//Word
    		
    		if (botOddsToGuessWord == 100) {
    			botOddsToGuessWord = 5;
    		}
    		else if (botOddsToGuessWord != 5) {
    			
    			if (botOddsToGuessWord - 20 <= 0) {
    				botOddsToGuessWord = 5;
    			}
    			else {
        			botOddsToGuessWord -= 20;
    			}
    			
    		}
    		    		
    		botGuess = availableBotWordList.get((int) (Math.random() * availableBotWordList.size()));
    		
    		//debugging
    		
			//botGuess = botWord;
			
			//
    		
    		//60 is the percentage of the word that is correct in order for the bot to be able to more accurately guess the word
    		
    		if ((float) (botWord.length() - botMissingCharacter) >= ((float) botWord.length() / 100) * 60) {
    			
    			//70 is the chance that the bot guesses the right word
    			
    			if (((int) Math.random() * 100) <= 70) {
    				botGuess = botWord;
    			}
    			else {
    				
    				botOddsToGuessWord += 60;
    			}
    		}
			
			if (botGuess.equals(botWord)) {
				botWon = true;
				lives = 0;
	    		for (int i = 0; i < botWord.length(); i++) {
	    			botCorrectGuessedLetters.set(i, String.valueOf(botWord.charAt(i)));
	    		}
	    		botAlreadyGuessedWords.add(botGuess);
				availableBotWordList.remove(botGuess);
				
				DisplayStats();	
				
			}
			else if (botWord.length() >= 5 && incorrectBotGuess == 2 || botWord.length() < 5 && incorrectBotGuess == 3){
				
	    		botGuess = availableGuaranteeCorrectBotGuess.get((int) Math.random() * availableGuaranteeCorrectBotGuess.size());
	    		
	    		availableGuaranteeCorrectBotGuess.remove(botGuess);
	    		
	    		
	    		System.out.println("Bot guess change from letter to: " + botGuess);
	    		System.out.println("Guarantee guess has been removed: " + botGuess);
	    		System.out.println("CHECK 1");
	    		System.out.println("CHECK 1.1");
	    		
	    		incorrectBotGuess = 0;

	    		Remove();
	    		
	    		BotCheckIfCorrectLetter();
	    		
			}
			else {
				
				incorrectBotGuess += 1;
								
				if (botWord.length() >= 5 && incorrectBotGuess == 2 || botWord.length() < 5 && incorrectBotGuess == 3){
					
		    		botGuess = availableGuaranteeCorrectBotGuess.get((int) Math.random() * availableGuaranteeCorrectBotGuess.size());
		    		
		    		System.out.println("Bot guess change from word to: " + botGuess);
		    		System.out.println("Guarantee guess has been removed: " + botGuess);
		    		System.out.println("CHECK 2");
		    		System.out.println("CHECK 1.2");
		    		
		    		incorrectBotGuess = 0;
		    		
		    		Remove();
		    				    		
		    		BotCheckIfCorrectLetter();
				}
				else {
					
					System.out.println("Bot incorect guess chain is: " + incorrectBotGuess);
					
		    		botAlreadyGuessedWords.add(botGuess);
		    		
					availableBotWordList.remove(botGuess);
					
					DisplayStats();	
				}
							
			}
						
    	}
    	
    	botMissingCharacter = 0;
    	
    	System.out.println("The bot's guess is: " + botGuess);
    	System.out.println(availableBotLetters);
    	System.out.println(availableBotVowels);
    	System.out.println(availableBotWordList);
    	
    }
    
    private void DisplayStats() {
    	
    	System.out.println("Run display stats");
    	
    	//Checks if the player has won and if the player has won then all of the empty slots will be filled in, e.g. word is dog and this is already filled in D__ and the player guesses dog so it turns into Dog
    	
    	if (won == true) {
    		for (int i = 0; i < word.length(); i++) {
    			correctGuessedLetters.set(i, String.valueOf(word.charAt(i)));
    		}
    	}
    	
    	//Runs to see if the player has filled in all letters
		if (guess.length() == 1) {
			CheckIfCorrectLetter(guess);
		}
		
		//Reason for (hasCorrectlyGuessedALetter == true || won == true) is because the player may just win by guessing the word and not entering a letter so this is just a preference
		
		//Adds the tables to stat which is then displayed as one big text
		

		stats.append("\nYou have correctly guessed these letters " + correctGuessedLetters.toString() + "\n");
		stats.append("You have already guessed these words: " + alreadyGuessedWords.toString() + "\n");	
		stats.append("You have already guessed these letters: " + alreadyGuessedLetters.toString() + "\n");	
		
		if (mode.equals("bot")) {
			
			stats.append("\nThe bot has correctly guessed these letters: " + botCorrectGuessedLetters.toString() + "\n");
			stats.append("The bot has already guessed these words: " + botAlreadyGuessedWords.toString() + "\n");	
			stats.append("The bot has already guessed these letters: " + botAlreadyGuessedLetters.toString() + "\n");	
			
		}
		
		stats.append("You have " + lives + " lives left");
		
		//Shows stats
		
		resultTextArea.setText(stats.toString());
		
		//Turns start to false (Do not remove)
		
		if (start == true) {
			start = false;
		}
		
		//Runs in order to see if the player won or not
		
		CheckIfWonOrLost();
		
    }
    
    private void BotCheckIfCorrectLetter() {
    	
    	System.out.println("bot check correct letter run");
    	
    	System.out.println(botGuess);
    	    	
    	System.out.println("Pre Bot incorect guess chain is: " + incorrectBotGuess);
    	
    	GuaranteeCorrectBotGuess(botGuess);
    	System.out.println("CHECK 3");
    	System.out.println("CHECK 1.3");
    	
    	CheckIfLetterInWord(botGuess);
    	
    	System.out.println("Bot correctly guessed a letter is: " + botCorrectlyGuessedALetter);
    	
    	if (botCorrectlyGuessedALetter == false) {
    		
    		incorrectBotGuess += 1;
    	
        	System.out.println("Post Bot incorect guess chain is: " + incorrectBotGuess);
    		
        	System.out.println(botWord.length());
        	System.out.println(botWord.length() >= 5 && incorrectBotGuess == 1);
        	System.out.println(botWord.length() < 5 && incorrectBotGuess == 2);
        	
        	GuaranteeCorrectBotGuess(botGuess);
        	
        	System.out.println("CHECK 4");
        	System.out.println("CHECK 1.4");
        	
    	}    	
    	else if (botVowels.contains(botGuess)) {
    		
			botOddsToGuessLetter += 20;
			
    	}
    	
    	CheckIfLetterInWord(botGuess); 
		
    	System.out.println("PRE ENTER ALREADY GUESSED: " + botGuess);
    	
    	if (botAlreadyGuessedLetters.contains(botGuess) == false) {
        	botAlreadyGuessedLetters.add(botGuess);
    	}
    	
    	botCorrectlyGuessedALetter = false;
    	
		for (int i = 0; i < botWord.length(); i++) {
			
			if (botCorrectGuessedLetters.get(i).equalsIgnoreCase(Character.toString(botWord.charAt(i))) == false){
				break;
			}
			
			if (i + 1 == botWord.length()) {
				botWon = true;
			}
				
		}
		
		Remove();
		
		HangmanImage();
		
    }
    
    public void GuaranteeCorrectBotGuess(String letter) {
    	
    	if (botWord.length() >= 5 && incorrectBotGuess == 2 || botWord.length() < 5 && incorrectBotGuess == 3) {
    		
    		letter = availableGuaranteeCorrectBotGuess.get((int) Math.random() * availableGuaranteeCorrectBotGuess.size());
    		
    		System.out.println("Bot guess has been changed from: " + botGuess + " to: " + letter);
    		System.out.println("Guarantee guess has been removed: " + letter);
    		
    		Remove();
    		        		
    		botGuess = letter;
    		
    		incorrectBotGuess = 0;
    		
    		CheckIfLetterInWord(letter);
    	}
    	
    }
    
    public void Remove() {
		if (availableGuaranteeCorrectBotGuess.contains(botGuess)) {
			availableGuaranteeCorrectBotGuess.remove(botGuess);
		}
		if (availableBotVowels.contains(botGuess)) {
			availableBotVowels.remove(botGuess);
		}
		else if (availableBotLetters.contains(botGuess)) {
			availableBotLetters.remove(botGuess);
		}
    }
    
    public void CheckIfLetterInWord(String letter) {
    	
    	for (int i = 0; i < botWord.length(); i++) {
    		
			if (letter.charAt(0) == botWord.toLowerCase().charAt(i)) {
				
				if (i == 0) {
					botCorrectGuessedLetters.set(i, letter.toUpperCase());
				}
				else {
					botCorrectGuessedLetters.set(i, letter);	
				}
				
				botCorrectlyGuessedALetter = true;	
				
			}
			
		}  
    	
    }
    
    
    private void CheckIfCorrectLetter(String letter) {
    	
    	//Checks if this letter guess is correct because if (hasCorrectlyGuessedALetter = false) then lives will be deducted 
    	//hasCorrectlyGuessedALetter is false by default and gets reset each time
    	
		//Runs through the entire word and see if the letter matches any of the letters in the words
    	
    	for (int i = 0; i < word.length(); i++) {
    		
    		//If i == 0 then that means that the character is the first letter of the word which then gets capitalized
    		
    		//Puts letters into all their correct slots e.g. e_epha_t
    		
			if (letter.charAt(0) == word.toLowerCase().charAt(i)) {
								
				if (i == 0) {
					correctGuessedLetters.set(i, letter.toUpperCase());
				}
				else {
					correctGuessedLetters.set(i, letter);	
				}
				
				correctlyGuessedALetter = true;	
						
			}
		}
    	
    	//Checks if all letters have been correctly guessed or not

    	
		for (int i = 0; i < word.length(); i++) {
			
			//Debugging
			
			System.out.println(correctGuessedLetters.get(i));
			System.out.println(Character.toString(word.charAt(i)));
			
			//Breaks out of for loop if all of the letters are not correct

			if (correctGuessedLetters.get(i).equalsIgnoreCase(Character.toString(word.charAt(i))) == false){
				break;
			}
			
			//Player guessed all letters correctly
			
			if (i + 1 == word.length()) {
				won = true;
			}
				
		}
		
    }
    
	private void CheckIfWonOrLost() {
    	
    	//Debugging
    	
    	System.out.println(stats.toString());
    	System.out.println("Run check if won");
    	
		//Checking if won
    	
    	if (won == true || lives == 0) {
    		
    		System.out.println("Player lost");
    		
    		//Runs if player run out of lives
    		
    		if (lives == 0 && won == false) {
    			
    			//Player Lost
    			
        		stats.append("\nYou lost!");
        		
        		if (mode.equals("bot")) {
        			stats.append("\nYour word was: " + word);
        			stats.append("\nThe bot's word was: " + botWord);
        		}
        		else {
        			stats.append("\nThe correct word was: " + word);
        		}
        		
    		}
    		
    		else {
    			
    			//Runs if player wins
    			
        		System.out.println("Player won");
    			
	    			//Player Won
	    			
	        		stats.append("\nYou won!");	
	    		}
	    		    		
	    		//Resetting Bot stuff
	    		
	    		if (mode.equals("bot")) {
	    			
	        		botOddsToGuessWord = 5;
	        		botOddsToGuessLetter = 20;
	        		botMissingCharacter = 0;
	        		incorrectBotGuess = 0;
	        		
	        		botWon = false;
	        		botTurn = false;
	        		botCorrectlyGuessedALetter = false;
	        		botGuess = "";
	        		
	        		availableBotWordList = (ArrayList<String>) wordList.clone();
	        		availableBotLetters = (ArrayList<String>) botLetters.clone();
	        		availableBotVowels = (ArrayList<String>) botVowels.clone();
	        		availableGuaranteeCorrectBotGuess.clear();
	        		
	        		botAlreadyGuessedLetters.clear();
	            	botAlreadyGuessedWords.clear();
	            	botCorrectGuessedLetters.clear();
	        		
	    		}
	    		
	    		//Resetting Player stuff
	    	
	    	guess = "";
	    	guessType = "";
    		startNewGame = true;
    		won = false;
    		correctlyGuessedALetter = false;
    		start = true;
    		mode = "";
    		lives = 7;
    		
    		//Resetting UI
    		
        	alreadyGuessedLetters.clear();
        	alreadyGuessedWords.clear();
        	correctGuessedLetters.clear();
        	inputPromptLabel.setText("Enter what mode you would like to play: Normal, Bot, Hard");
        	inputPanel.remove(inputPromptLabel);
        	inputPanel.remove(inputButton);
        	inputPanel.add(playOptionTextArea);
        	inputPanel.add(TextArea);
        	TextArea.setText("");
        	resultTextArea.setText(stats.toString());
        	inputPanel.add(inputButton);
			inputPanel.revalidate();
			inputPanel.repaint();
			
			//Resetting stats
			
			stats.delete(0, stats.length());
			
    		System.out.println("Cleared stats");
			
    	}
    	else {
    		
    		//Player neither won or loss
    		
    		System.out.println("Cleared stats 2");
    		
    		stats.delete(0, stats.length());
    		
    		inputPromptLabel.setText("Enter if you want to guess word or letter:");
    		
    	}
    }
    
    private void HangmanImage() {
    	
    	System.out.println("Hangman image ran");
    	
		//Displays hangman art if player lives are below 7
    	
    	if (lives != 7) {
    		
    		System.out.println("Lives is: " + lives);
    		
        	stats.append(hangmanArt.get(7 - (lives + 1)).toString());	
    	}
    	
    	//Displays stats
    	
    	DisplayStats();
    	
    }
    
    public static void main(String[] args) {
    	
    	//Makes UI visible when game starts
    	
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new FinalProject().setVisible(true);
            }
        });
        
        //Appends hangman UI into hangmanArt Array because I don't know how to hard set tables into array list

        hangmanArt.add(new ArrayList<>(Arrays.asList(
                "   +---+\n",
                "  |   |\n",
                "      |\n",
                "      |\n",
                "      |\n",
                "      |\n",
                "=========\n"
        )));
        
        hangmanArt.add(new ArrayList<>(Arrays.asList(
                "   +---+\n",
                "  |   |\n",
                "      |\n",
                "      |\n",
                "      |\n",
                "      |\n",
                "=========\n"
        )));
        
        hangmanArt.add(new ArrayList<>(Arrays.asList(
                "  +---+\n",
                "  |   |\n",
                " O  |\n",
                "      |\n",
                "      |\n",
                "      |\n",
                "=========\n"
        )));
        
        hangmanArt.add(new ArrayList<>(Arrays.asList(
                "  +---+\n",
                "  |   |\n",
                " O  |\n",
                "  |   |\n",
                "      |\n",
                "      |\n",
                "=========\n"
        )));
        
        hangmanArt.add(new ArrayList<>(Arrays.asList(
                "  +---+\n",
                "  |   |\n",
                " O  |\n",
                " /|   |\n",
                "      |\n",
                "      |\n",
                "=========\n"
        )));
        
        hangmanArt.add(new ArrayList<>(Arrays.asList(
                "  +---+\n",
                "  |   |\n",
                " O  |\n",
                " /|\\  |\n",
                "      |\n",
                "      |\n",
                "=========\n"
        )));
        
        hangmanArt.add(new ArrayList<>(Arrays.asList(
                "  +---+\n",
                "  |   |\n",
                " O  |\n",
                " /|\\  |\n",
                " /    |\n",
                "      |\n",
                "=========\n"
        )));
        
        hangmanArt.add(new ArrayList<>(Arrays.asList(
                " +---+\n",
                "  |   |\n",
                " O  |\n",
                " /|\\  |\n",
                " / \\  |\n",
                "      |\n",
                "=========\n"
        )));
        
    }
    
}
