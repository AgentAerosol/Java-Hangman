import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;
import java.util.ArrayList;
import java.util.Arrays;

public class ProjectTwo extends JFrame{
	
	JTextField TextArea;
    JTextArea resultTextArea = new JTextArea();
    JLabel playOptionTextArea = new JLabel("Do you want to play yes or no?");
    JLabel inputPromptLabel = new JLabel("Enter if you want to guess word or letter:");
    JButton generateButton = new JButton("Enter");
    JPanel inputPanel = new JPanel();
    
    boolean won;
    String word;
    
	ArrayList<String> wordList = new ArrayList<String>(Arrays.asList("Horse", "Badger", "Zebra", "Elephant", "Duck", "Dog"));
	static ArrayList<ArrayList<String>> hangmanArt = new ArrayList<>();
	
    
	ArrayList<String> wordsUsedInPastThreeGames = new ArrayList<String>();
	
	String firstWord = "";
	String secondWord = "";
	String thirdWord = "";
	
	ArrayList<String> alreadyGuessedLetters = new ArrayList<String>();
    ArrayList<String> alreadyGuessedWords = new ArrayList<String>(); 
    ArrayList<String> correctGuessedLetters = new ArrayList<String>();
    
    String guessType;
    String guess;
    
    boolean hasCorrectlyGuessedALetter = false;
    
    boolean startNewGame = true;
    boolean start = true;
    
    StringBuilder stats = new StringBuilder();
    
    int lives = 7;
    
    public ProjectTwo() {
    	
    	setTitle("Hangman");
        setSize(1920, 1080);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        JPanel contentPane = new JPanel();
        contentPane.setLayout(new BorderLayout());
        
        inputPanel.setLayout(new FlowLayout());

        TextArea = new JTextField(10);

        
        JPanel resultPanel = new JPanel();
        resultPanel.setLayout(new BorderLayout());
        
        JLabel resultLabel = new JLabel("Hangman output:");

        resultPanel.add(resultLabel, BorderLayout.NORTH);
        resultPanel.add(new JScrollPane(resultTextArea), BorderLayout.CENTER);
        
        contentPane.add(inputPanel, BorderLayout.NORTH);
        contentPane.add(resultPanel, BorderLayout.CENTER);
        
    	if (startNewGame == true) {
    		inputPanel.add(playOptionTextArea);
            inputPanel.add(TextArea);
            inputPanel.add(generateButton);
    	}
    	else {
            inputPanel.add(inputPromptLabel);
            inputPanel.add(TextArea);
            inputPanel.add(generateButton);
    	}
        
        generateButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
            	if (startNewGame == true) {
            		if (TextArea.getText().toString().equalsIgnoreCase("yes")) {
            			inputPanel.remove(playOptionTextArea);
            			inputPanel.add(inputPromptLabel);
            			inputPanel.remove(TextArea);
            			inputPanel.remove(generateButton);
                        inputPanel.add(TextArea);
                        inputPanel.add(generateButton);
                        resultTextArea.setText("");
                        TextArea.setText("");
            			inputPanel.revalidate();
            			inputPanel.repaint();
            	        startNewGame = false;
                        newGame();
            		}
            		else if (TextArea.getText().toString().equalsIgnoreCase("no")) {
            			System.exit(0);
            		}
            		else {
            			resultTextArea.setText("You did not enter yes or no");
            		}	
            	}
            	else {
            		System.out.println("Start new game is: " + startNewGame);
            		PickGuessType();
            	};	
            }
        });
    	
        setContentPane(contentPane);
        
    }
    
    private void newGame() {
    	
    	System.out.println("Starting a new game");
    	
    	Random randomNum = new Random();
    	
    	int number = randomNum.nextInt(wordList.size());
		word = wordList.get(number);
		
		if (firstWord == "") {
			firstWord = word;
			wordList.remove(word);
			wordsUsedInPastThreeGames.add(word);
		}
		else if (secondWord == "") {
			secondWord = word;
			wordList.remove(word);
			wordsUsedInPastThreeGames.add(word);
		}
		else if (thirdWord == "") {
			thirdWord = word;
			wordList.remove(word);
			wordsUsedInPastThreeGames.add(word);
		}
		else {
			firstWord = secondWord;
			secondWord = thirdWord;
			thirdWord = word;
			wordList.add(wordsUsedInPastThreeGames.get(0));
			wordsUsedInPastThreeGames.remove(0);
			wordList.remove(word);
			wordsUsedInPastThreeGames.add(word);
		}
		
		for (int i = 0; i < word.length(); i++) {
			correctGuessedLetters.add("_");
		}
    }
    
    private void PickGuessType() {
    	
    	if (inputPromptLabel.getText().equals("Enter if you want to guess word or letter:")) {
    		guessType = TextArea.getText().toLowerCase();
        	if (guessType.equals("word") == false && guessType.equals("letter") == false) {
                resultTextArea.setText("You did not enter word or letter");
                stats.delete(0,  stats.length());
                if (start == false) {
                    DisplayStats();
                    HangmanImage();
                }
        	}
        	else if (guessType.equals("word") || guessType.equals("letter")) {
                if (guessType.equals("word")) {
                    inputPromptLabel.setText("Enter the word that you would like to guess");	
                }
                else {
                    inputPromptLabel.setText("Enter the letter that you would like to guess");
                }
        	}
    	}
    	else {
    		
    		guess = TextArea.getText().toLowerCase();

    		System.out.println("Guess is: " + guess);
    		System.out.println("Word is: " + word.toLowerCase());
    		
    		if (guessType.equals("word")) {
    			if (guess.equals(word.toLowerCase())) {
    				alreadyGuessedWords.add(guess);
        			won = true;
        		}
    			else {
    				alreadyGuessedWords.add(guess);
    				lives -= 1;
    			}
    			stats.delete(0,  stats.length());
				HangmanImage();
    			DisplayStats();
    			CheckIfWonOrLost();
    		}
    		else {
    			if (guess.length() != 1){
    				inputPromptLabel.setText("Enter the letter that you would like to guess");
    				stats.delete(0, stats.length());
    				stats.append("You entered more than 1 letter\n");
    				HangmanImage();
    				DisplayStats();
    			}
    			else {
    				boolean alreadyGuessed = false;
    				boolean correctGuess = false;
    				if (alreadyGuessedLetters.size() != 0) {
        				for (int i = 0; i < alreadyGuessedLetters.size(); i++) {
        					if (guess.charAt(0) == (alreadyGuessedLetters.get(i).charAt(0))) {
        						alreadyGuessed = true;
        	    				inputPromptLabel.setText("Enter the letter that you would like to guess");
        	    				stats.delete(0, stats.length());
        	    				stats.append("You already tried this letter before\n");
        	    				HangmanImage();
        	    				DisplayStats();
        						break;
        					}
        				}	
    				}
    				System.out.println(alreadyGuessed);
    				if (alreadyGuessed == false) {
        				for (int i = 0; i < word.length(); i++) {
        					if (guess.charAt(0) == word.toLowerCase().charAt(i)) {
        						if (i == 0) {
        							correctGuessedLetters.set(i, guess.toUpperCase());
        						}
        						else {
        							correctGuessedLetters.set(i, guess);	
        						}
        						alreadyGuessedLetters.add(guess);
        						correctGuess = true;
        					}
        				}
        				if (correctGuess == false) {
        					alreadyGuessedLetters.add(guess);
        					lives -= 1;
        				}
        				stats.delete(0,  stats.length());
    					HangmanImage();
        				DisplayStats();
        				CheckIfWonOrLost();
    				}
    			}
    		}
    	}
    	TextArea.setText("");
    }
    
    private void DisplayStats() {
    	
    	System.out.println("Run display stats");
    	
    	if (won == true) {
    		for (int i = 0; i < word.length(); i++) {
    			correctGuessedLetters.set(i, String.valueOf(word.charAt(i)));
    		}
    	}
    	
		if (guess.length() == 1) {
			CheckIfCorrectLetter();
		}
		if (hasCorrectlyGuessedALetter == true || won == true) {
			stats.append("You have correctly guessed these letters: " + correctGuessedLetters.toString() + "\n");
		}
		if (alreadyGuessedWords.size() != 0) {
			stats.append("You have already guessed these words: " + alreadyGuessedWords.toString() + "\n");	
		}
		if (alreadyGuessedLetters.size() != 0) {
			stats.append("You have already guessed these letters: " + alreadyGuessedLetters.toString() + "\n");	
		}
		
		stats.append("You have " + lives + " lives left");
		resultTextArea.setText(stats.toString());
		
		if (start == true) {
			start = false;
		}
		
    }
    
    private void CheckIfCorrectLetter() {
    	
    	for (int i = 0; i < word.length(); i++) {
			if (guess.charAt(0) == word.toLowerCase().charAt(i)) {
				if (i == 0) {
					correctGuessedLetters.set(i, guess.toUpperCase());
				}
				else {
					correctGuessedLetters.set(i, guess);	
				}
				hasCorrectlyGuessedALetter = true;
			}
		}
		
    	System.out.println(word);
    	
		for (int i = 0; i < word.length(); i++) {
			System.out.println(correctGuessedLetters.get(i));
			System.out.println(Character.toString(word.charAt(i)));
			if (correctGuessedLetters.get(i).equalsIgnoreCase(Character.toString(word.charAt(i))) == false){
				break;
			}
			if (i + 1 == word.length()) {
				won = true;
			}
		}
		
    }
    
    private void CheckIfWonOrLost() {
    	
    	System.out.println(stats.toString());
    	System.out.println("Run check if won");
    	
    	
    	if (won == true || lives == 0) {
    		if (lives == 0 && won == false) {
        		stats.append("\nYou lost!");
        		stats.append("\nThe correct word was: " + word);
    		}
    		else {
        		stats.append("\nYou won!");	
    		}
    		startNewGame = true;
    		won = false;
    		hasCorrectlyGuessedALetter = false;
    		start = true;
    		lives = 7;
        	alreadyGuessedLetters.clear();
        	alreadyGuessedWords.clear();
        	correctGuessedLetters.clear();
        	inputPromptLabel.setText("Enter if you want to guess word or letter:");
        	inputPanel.remove(inputPromptLabel);
        	inputPanel.remove(generateButton);
        	inputPanel.add(playOptionTextArea);
        	inputPanel.add(TextArea);
        	TextArea.setText("");
        	resultTextArea.setText(stats.toString());
        	inputPanel.add(generateButton);
			inputPanel.revalidate();
			inputPanel.repaint();
			stats.delete(0, stats.length());
    	}
    	else {
    		inputPromptLabel.setText("Enter if you want to guess word or letter:");
    	}
    }
    
    private void HangmanImage() {
    	
    	if (lives != 7) {
        	stats.append(hangmanArt.get(7 - (lives + 1)).toString());	
    	}
    	if (lives == 0 && won == false) {
    		DisplayStats();
    		CheckIfWonOrLost();
    	}
    	
    }
    
    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ProjectTwo().setVisible(true);
            }
        });
        
        hangmanArt.add(new ArrayList<>(Arrays.asList(
                "  +---+\n",
                "  |   |\n",
                "      |\n",
                "      |\n",
                "      |\n",
                "      |\n",
                "=========\n"
        )));
        
        hangmanArt.add(new ArrayList<>(Arrays.asList(
                "  +---+\n",
                "  |   |\n",
                " O  |\n",
                "      |\n",
                "      |\n",
                "      |\n",
                "=========\n"
        )));
        
        hangmanArt.add(new ArrayList<>(Arrays.asList(
                "  +---+\n",
                "  |   |\n",
                " O  |\n",
                "  |   |\n",
                "      |\n",
                "      |\n",
                "=========\n"
        )));
        
        hangmanArt.add(new ArrayList<>(Arrays.asList(
                "  +---+\n",
                "  |   |\n",
                " O  |\n",
                " /|   |\n",
                "      |\n",
                "      |\n",
                "=========\n"
        )));
        
        hangmanArt.add(new ArrayList<>(Arrays.asList(
                "  +---+\n",
                "  |   |\n",
                " O  |\n",
                " /|\\  |\n",
                "      |\n",
                "      |\n",
                "=========\n"
        )));
        
        hangmanArt.add(new ArrayList<>(Arrays.asList(
                "  +---+\n",
                "  |   |\n",
                " O  |\n",
                " /|\\  |\n",
                " /    |\n",
                "      |\n",
                "=========\n"
        )));
        
        hangmanArt.add(new ArrayList<>(Arrays.asList(
                " +---+\n",
                "  |   |\n",
                " O  |\n",
                " /|\\  |\n",
                " / \\  |\n",
                "      |\n",
                "=========\n"
        )));
        
    }
    
}
